#!/usr/bin/env python3
"""
Test script for go2web HTTP client
Demonstrates all functionality for Lab 5
"""

import subprocess
import time
import sys
from pathlib import Path

def run_command(cmd, description=""):
    """Run a command and display results"""
    print("\n" + "="*60)
    print(f"TEST: {description}")
    print("="*60)
    print(f"Command: {cmd}")
    print("-" * 60)
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        print(f"Return code: {result.returncode}")
        
    except subprocess.TimeoutExpired:
        print("Command timed out after 30 seconds")
    except Exception as e:
        print(f"Error running command: {e}")
    
    print("-" * 60)

def main():
    """Run comprehensive tests"""
    
    # Check if go2web executable exists
    go2web_path = Path("./go2web")
    if not go2web_path.exists():
        print("‚ùå go2web executable not found. Run setup.py first.")
        print("Run: python3 setup.py")
        sys.exit(1)
    
    print("üöÄ Starting go2web comprehensive tests...")
    print("This will test all Lab 5 requirements")
    
    # Test 1: Help command
    run_command("./go2web -h", "Help Command (-h option)")
    
    # Test 2: Basic URL fetching
    run_command("./go2web -u https://httpbin.org/json", "Fetch JSON URL (Content Negotiation)")
    
    # Test 3: HTML URL fetching
    run_command("./go2web -u https://example.com", "Fetch HTML URL (Text Extraction)")
    
    # Test 4: HTTP redirect following
    run_command("./go2web -u http://github.com", "HTTP Redirect Following")
    
    # Test 5: Search functionality
    run_command("./go2web -s python programming", "Search Functionality")
    
    # Test 6: Error handling
    run_command("./go2web -u https://httpbin.org/status/404", "Error Handling (404)")
    
    # Test 7: Caching (run same URL twice)
    print("\n" + "="*60)
    print("TEST: HTTP Caching (run same URL twice)")
    print("="*60)
    print("First request (should be slow):")
    run_command("./go2web -u https://httpbin.org/delay/2", "")
    
    print("Second request (should be fast - from cache):")
    run_command("./go2web -u https://httpbin.org/delay/2", "")
    
    # Test 8: Invalid URL handling
    run_command("./go2web -u invalid-url", "Invalid URL Handling")
    
    # Test 9: No arguments
    run_command("./go2web", "No Arguments (should show help)")
    
    print("\n" + "üéâ" * 20)
    print("TESTS COMPLETED!")
    print("üéâ" * 20)
    print("\nFeatures demonstrated:")
    print("‚úÖ HTTP/HTTPS requests using raw sockets")
    print("‚úÖ HTML parsing and text extraction")
    print("‚úÖ JSON content negotiation")
    print("‚úÖ Search functionality")
    print("‚úÖ HTTP redirect following")
    print("‚úÖ HTTP caching with TTL")
    print("‚úÖ Error handling")
    print("‚úÖ Command-line interface")
    
    print("\nLab 5 Requirements Met:")
    print("‚úÖ 6 points: -h, -u, and -s options working")
    print("‚úÖ +1 point: Search results can be accessed")
    print("‚úÖ +1 point: HTTP redirects implemented")
    print("‚úÖ +2 points: HTTP caching mechanism")
    print("‚úÖ +2 points: Content negotiation (JSON/HTML)")
    print("‚úÖ Total: 12 points possible")

if __name__ == "__main__":
    main()